{"version":3,"sources":["images/Cross.svg","images/Right.svg","Sounds/move.wav","Sounds/error.wav","Sounds/victory.wav","Game.js","App.js","reportWebVitals.js","index.js"],"names":["Game","useState","board","markPositionOnBoard","player","setPlayer","winner","setWinner","MoveSound","Audio","Move","VictorySound","Victory","ErrorSound","Error","handlePress","row","column","newBoard","slice","undefined","isGameOvered","play","rowCrossed","columnCrossed","diagonalCrossed","i","j","getBoxView","src","Cross","alt","Right","className","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAAe,MAA0B,kCCA1B,MAA0B,kCCA1B,MAA0B,iCCA1B,MAA0B,kCCA1B,MAA0B,oC,OCgJ1BA,EAzIF,WACL,MAAkCC,mBAAS,CAAC,GAAG,GAAG,KAAlD,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAyBF,mBAAS,GAAlC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA0BJ,qBAA1B,mBAAOK,EAAP,KAAeC,EAAf,KAEMC,EAAW,IAAIC,MAAOC,GACtBC,EAAe,IAAIF,MAAMG,GACzBC,EAAa,IAAIJ,MAAMK,GAEvBC,EAAc,SAACC,EAAIC,GAErB,IAAMC,EAAShB,EAAMiB,aACSC,IAA1BF,EAAUF,GAAKC,IACfC,EAASF,GAAKC,GAAUb,EAExBD,EAAoBe,GAEjBG,KACCV,EAAaW,OACbf,EAAUH,KAEVI,EAAUc,OACVjB,EAAU,EAAED,KAIhBS,EAAWS,QAKbD,EAAc,WAChB,OAAOE,KAAgBC,KAAmBC,KAGxCF,EAAW,WACb,IAAK,IAAIG,EAAG,EAAGA,EAAE,EAAEA,IACf,GAAIxB,EAAMwB,GAAG,KAAOxB,EAAMwB,GAAG,IACrBxB,EAAMwB,GAAG,KAAMxB,EAAMwB,GAAG,SACRN,IAAhBlB,EAAMwB,GAAG,GACR,OAAO,EAGpB,OAAO,GAGLF,EAAe,WAEjB,IAAK,IAAIG,EAAG,EAAGA,EAAE,EAAEA,IACf,GAAIzB,EAAM,GAAGyB,KAAOzB,EAAM,GAAGyB,IACrBzB,EAAM,GAAGyB,KAAMzB,EAAM,GAAGyB,SACRP,IAAhBlB,EAAM,GAAGyB,GACR,OAAO,EAGpB,OAAO,GAILF,EAAiB,WACnB,OAAIvB,EAAM,GAAG,KAAOA,EAAM,GAAG,IACzBA,EAAM,GAAG,KAAOA,EAAM,GAAG,SACNkB,IAAhBlB,EAAM,GAAG,IAIZA,EAAM,GAAG,KAAOA,EAAM,GAAG,IACzBA,EAAM,GAAG,KAAOA,EAAM,GAAG,SACVkB,IAAflB,EAAM,GAAG,IAQX0B,EAAY,SAACZ,EAAIC,GAAL,OACd,qCAE2B,IAAvBf,EAAMc,GAAKC,IAAiB,qBAAKY,IAAKC,EAAOC,IAAI,UAC1B,IAAtB7B,EAAMc,GAAKC,IAAgB,qBAAKY,IAAKG,EAAOD,IAAI,cAW7D,OACI,sBAAKE,UAAU,YAAf,UACI,kDACA,gCACA,qBAAKA,UAAU,WAAf,SACI,wBAAQA,UAAU,QAAQC,QAXX,WACf/B,EAAqB,CAAC,GAAG,GAAG,KAC5BE,EAAU,GACVE,OAAUa,IAQV,8BAEJ,sBAAKa,UAAU,SAAf,UACK,qBAAKA,UAAW,YAAuB,IAAT7B,EAAa,OAAO,QAAlD,uBACD,qBAAK6B,UAAW,YAAuB,IAAT7B,EAAa,OAAO,QAAlD,+BAIUgB,IAAVd,GAAuB,sBAAK2B,UAAU,SAAf,iDAAmD3B,EAAQ,EAA3D,iCAG3B,qBAAK2B,UAAU,gBAAf,SACI,gCACI,kCACI,+BACI,qBAAIC,QAAS,kBAAInB,EAAY,EAAE,IAA/B,cAAqCa,EAAW,EAAE,MAElD,qBAAIM,QAAS,kBAAInB,EAAY,EAAE,IAA/B,cAAqCa,EAAW,EAAE,MAClD,qBAAIM,QAAS,kBAAInB,EAAY,EAAE,IAA/B,cAAqCa,EAAW,EAAE,SAGtD,+BACI,qBAAIM,QAAS,kBAAInB,EAAY,EAAE,IAA/B,cAAqCa,EAAW,EAAE,MAClD,oBAAIM,QAAS,kBAAInB,EAAY,EAAE,IAA/B,SAAoCa,EAAW,EAAE,KACjD,oBAAIM,QAAS,kBAAInB,EAAY,EAAE,IAA/B,SAAoCa,EAAW,EAAE,QAGrD,+BACI,oBAAIM,QAAS,kBAAInB,EAAY,EAAE,IAA/B,SAAoCa,EAAW,EAAE,KACjD,oBAAIM,QAAS,kBAAInB,EAAY,EAAE,IAA/B,SAAoCa,EAAW,EAAE,KACjD,oBAAIM,QAAS,kBAAInB,EAAY,EAAE,IAA/B,SAAoCa,EAAW,EAAE,sB,MCzH9DO,MARf,WACE,OACE,qBAAKF,UAAU,MAAf,SACC,cAAC,EAAD,OCKUG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b86a613b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Cross.058af5b2.svg\";","export default __webpack_public_path__ + \"static/media/Right.b2777665.svg\";","export default __webpack_public_path__ + \"static/media/move.d51b4b5b.wav\";","export default __webpack_public_path__ + \"static/media/error.19d5e99e.wav\";","export default __webpack_public_path__ + \"static/media/victory.f30c40b4.wav\";","import React,{useState} from 'react';\nimport Cross from './images/Cross.svg';\nimport Right from './images/Right.svg';\nimport Move from './Sounds/move.wav';\nimport Error from './Sounds/error.wav';\nimport Victory from './Sounds/victory.wav';\n\nconst Game = () => {\n        const [board,markPositionOnBoard]=useState([[],[],[]]);\n        const [player,setPlayer]=useState(0);\n        const [winner ,setWinner]=useState();\n\n        const MoveSound= new Audio (Move);\n        const VictorySound = new Audio(Victory);\n        const ErrorSound = new Audio(Error);\n\n        const handlePress = (row,column)=>{\n            // console.log(row,column)\n            const newBoard=board.slice();\n            if (newBoard [row][column] ===undefined){\n                newBoard[row][column] = player;\n                \n                markPositionOnBoard(newBoard)\n\n                if(isGameOvered()){\n                    VictorySound.play();\n                    setWinner(player);\n                } else{\n                    MoveSound.play();\n                    setPlayer(1-player)\n                    \n                }\n            } else {\n                ErrorSound.play()\n            }\n            // console.log(newBoard)\n        };\n\n        const isGameOvered =()=>{\n            return rowCrossed() || columnCrossed() || diagonalCrossed()\n        }\n\n        const rowCrossed=()=>{\n            for (let i =0; i<3;i++){\n                if (board[i][0] === board[i][1]\n                     && board[i][1] ===board[i][2]\n                     && board[i][0] !== undefined){\n                         return true;\n                     }\n            }\n            return false;\n        };\n\n        const columnCrossed =()=>{\n\n            for (let j =0; j<3;j++){\n                if (board[0][j] === board[1][j]\n                     && board[1][j] ===board[2][j]\n                     && board[0][j] !== undefined){\n                         return true;\n                     }\n            }\n            return false;\n\n        };\n\n        const diagonalCrossed =()=>{\n            if (board[0][0] === board[1][1] &&\n                board[1][1] === board[2][2]\n                && board[0][0] !== undefined){\n                    return true;\n                };\n\n            if (board[0][2] === board[1][1] &&\n                board[1][1] === board[2][0] && \n                board[0][2] !==undefined){\n                    return true;\n                }\n\n                return false;\n\n        };\n\n        const getBoxView =(row,column)=>(\n            <>\n            {\n                board[row][column] === 0 && <img src={Cross} alt=\"empty\" /> }\n               { board[row][column] ===1 && <img src={Right} alt=\"empty\" /> \n            }\n            </>\n        );\n\n            const handleClear =()=>{\n                markPositionOnBoard ([[],[],[]]);\n                setPlayer(0);\n                setWinner(undefined);\n            }\n\n    return (\n        <div className='container'>\n            <h1>TIC TAC TOE GAME</h1>\n            <div>\n            <div className='controls'>\n                <button className='clear' onClick={handleClear}>Start New Game</button>\n            </div>\n            <div className='player'>\n                 <div className={'player1 ' + (player===0 ? 'turn':'wait')}> Player 1</div>\n                <div className={'player2 ' + (player===1 ? 'turn':'wait')}> Player 2</div>\n            </div>\n\n            {\n                winner !==undefined && <div className='winner'> The Winner ‚úåÔ∏è is Player  {winner +1 }  üèÜüèÜ </div>\n            }\n\n            <div className=\"table_wrapper\">\n                <table>\n                    <tbody>\n                        <tr>\n                            <td onClick={()=>handlePress(0,0)}> {getBoxView(0,0)}</td>  \n                            \n                            <td onClick={()=>handlePress(0,1)}> {getBoxView(0,1)}</td>\n                            <td onClick={()=>handlePress(0,2)}> {getBoxView(0,2)}</td>\n                        </tr>\n\n                        <tr>\n                            <td onClick={()=>handlePress(1,0)}> {getBoxView(1,0)}</td>\n                            <td onClick={()=>handlePress(1,1)}>{getBoxView(1,1)}</td>\n                            <td onClick={()=>handlePress(1,2)}>{getBoxView(1,2)}</td>\n                        </tr>\n\n                        <tr>\n                            <td onClick={()=>handlePress(2,0)}>{getBoxView(2,0)}</td>\n                            <td onClick={()=>handlePress(2,1)}>{getBoxView(2,1)}</td>\n                            <td onClick={()=>handlePress(2,2)}>{getBoxView(2,2)}</td>\n                        </tr>\n                    </tbody>\n                </table>\n\n            </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Game\n","import React from 'react';\nimport Game from './Game';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Game/> \n    </div>\n  );\n}\n\nexport default App;\n\n\n\n//  const [winner ,setWinner]=useState();\n\n\n  // if(isGameOvered()){\n  //                   setWinner(player);\n  //               } else{\n                    \n  //               }\n\n\n        // const isGameOvered =()=>{\n        //     return rowCrossed() || columnCrossed() || diagonalCrossed()\n        // }\n\n        // const rowCrossed=()=>{\n        //     for (let i =0; i<3;i++){\n        //         if (board[i][0] === board[i][1]\n        //              && board[i][1] ===board[i][2]\n        //              && board[i][0] !== undefined){\n        //                  return true;\n        //              }\n        //     }\n        //     return false;\n        // };\n\n        // const columnCrossed =()=>{\n\n        //     for (let j =0; j<3;j++){\n        //         if (board[0][j] === board[1][j]\n        //              && board[1][j] ===board[2][j]\n        //              && board[0][j] !== undefined){\n        //                  return true;\n        //              }\n        //     }\n        //     return false;\n\n        // };\n\n        // const diagonalCrossed =()=>{\n        //     if (board[0][0] === board[1][1] &&\n        //         board[1][1] === board[2][2]\n        //         && board[0][0] !== undefined){\n        //             return true;\n        //         };\n\n        //     if (board[0][2] === board[1][1] &&\n        //         board[1][1] === board[2][0] && \n        //         board[0][2] !==undefined){\n        //             return true;\n        //         }\n\n        //         return false;\n\n        // };","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}